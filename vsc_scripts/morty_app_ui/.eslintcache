[{"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/index.js":"1","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/Main.js":"2","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/home.js":"3","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/compare.js":"4","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/handle_input.js":"5","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/handle_mult_input.js":"6","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/morty_js/useful_functions.js":"7","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/calc_finances.js":"8","/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/calc_mult_finances.js":"9"},{"size":204,"mtime":1608926408565,"results":"10","hashOfConfig":"11"},{"size":2256,"mtime":1612293161425,"results":"12","hashOfConfig":"11"},{"size":16848,"mtime":1612292050679,"results":"13","hashOfConfig":"11"},{"size":19526,"mtime":1611866966040,"results":"14","hashOfConfig":"11"},{"size":6213,"mtime":1609959807938,"results":"15","hashOfConfig":"11"},{"size":8691,"mtime":1608926408542,"results":"16","hashOfConfig":"11"},{"size":636,"mtime":1610149390474,"results":"17","hashOfConfig":"11"},{"size":10356,"mtime":1609180934745,"results":"18","hashOfConfig":"11"},{"size":10781,"mtime":1608926408541,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1p4k9bc",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/index.js",[],["41","42"],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/Main.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/home.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/compare.js",["43","44"],"import React from 'react';\nimport Fade from 'react-reveal/Fade'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Table, TableBody, TableCell, \n          TableContainer, TableHead, TableRow, Paper, TablePagination,\n          Grid, Hidden, Tabs, Tab, Typography, Box, InputAdornment,\n          FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport {handle_mult_input} from './handle_mult_input.js'\nimport { ResponsivePie } from '@nivo/pie'\n\n// For the TabPanels to work\nfunction TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`vertical-tabpanel-${index}`}\n      aria-labelledby={`vertical-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box p={0}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.any.isRequired,\n  value: PropTypes.any.isRequired,\n};\n\nfunction a11yProps(index) {\n  return {\n    id: `vertical-tab-${index}`,\n    'aria-controls': `vertical-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n    display: 'flex',\n  },\n  textField: {\n    width: \"26vmin\",\n  },\n  margin: {\n    margin: theme.spacing(1.1)\n  },\n  table: {\n    width: '100%',\n  },\n  container: {\n    maxHeight: 440,\n    maxWidth: 530,\n  },\n}));\n\n// Creates default TextField values\nfunction create_text_field(key, label, id, start_adornment, end_adornment, value) {\n  return {key, label, id, start_adornment, end_adornment, value, error_value: false}\n}\n\n// Create SelectFields\nfunction create_select_field(fc_key, il_key, s_key, label_value, select_id, value, labels_arr) {\n  return {fc_key, il_key, s_key, label_value, select_id, value, labels_arr}\n}\n\n// For changing SelectField values\nconst tax_filing_status_arr = [\n  {\n    value: 'Single',\n    label: 'Single',\n  },\n  {\n    value: 'Married (Joint)',\n    label: 'Married (Joint)',\n  },\n  {\n    value: 'Married (Separate)',\n    label: 'Married (Separate)',\n  },\n  {\n    value: 'Head of Household',\n    label: 'Head of Household',\n  },\n];\nconst yearly_payments_arr = [\n  {\n    value: '12 (Monthly)',\n    label: '12 (Monthly)',\n  },\n  {\n    value: '26 (Bi-Weekly)',\n    label: '26 (Bi-Weekly)',\n  },\n  {\n    value: '52 (Weekly)',\n    label: '52 (Weekly)',\n  },\n  ];\nconst property_type_arr = [\n  {\n    value: 'House',\n    label: 'House',\n  },\n  {\n    value: 'Condo',\n    label: 'Condo',\n  },\n  {\n    value: 'Apartment',\n    label: 'Apartment',\n  },\n];\n\n// Creates default data for the DataTable\nfunction create_data(id, name, monthly, yearly, total) {\n  return { id, name, monthly, yearly, total }\n}\n\n// For sorting rows in the DataTable\nfunction descending_comparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction get_comparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descending_comparator(a, b, orderBy)\n    : (a, b) => -descending_comparator(a, b, orderBy);\n}\n\nfunction stable_sort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) return order;\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map((el) => el[0]);\n}\n\nexport default function Compare() {\n  const classes = useStyles();\n  // For TextFields\n  const [values_a, set_values_a] = React.useState([\n    create_text_field(0, 'Purchase Price', 'purchase_price_a', '$', '' ,''),\n    create_text_field(1, 'Down Payment', 'down_payment_a', '$', '' ,''),\n    create_text_field(2, 'Interest Rate', 'interest_rate_a', '%', '' ,''),\n    create_text_field(3, 'Loan Duration', 'loan_duration_a', '', 'Years' ,''),\n    create_text_field(4, 'City', 'city_a', '', '' ,''),\n    create_text_field(5, 'State', 'state_a', '', '' ,''),\n    create_text_field(6, 'Income', 'income_a', '$', '' ,''),\n  ]);\n  const [select_values_a, set_select_values_a] = React.useState([\n    create_select_field(0, 1, 2, 'Tax Filing Status', 'Tax Filing Status', ' ', tax_filing_status_arr),\n    create_select_field(3, 4, 5, 'Yearly Payments', 'Yearly Payments', ' ', yearly_payments_arr),\n    create_select_field(6, 7, 8, 'Type Of Property', 'Type Of Property', ' ', property_type_arr)\n  ]);\n  const [values_b, set_values_b] = React.useState([\n    create_text_field(0, 'Purchase Price', 'purchase_price_b', '$', '' ,''),\n    create_text_field(1, 'Down Payment', 'down_payment_b', '$', '' ,''),\n    create_text_field(2, 'Interest Rate', 'interest_rate_b', '%', '' ,''),\n    create_text_field(3, 'Loan Duration', 'loan_duration_b', '', 'Years' ,''),\n    create_text_field(4, 'City', 'city_b', '', '' ,''),\n    create_text_field(5, 'State', 'state_b', '', '' ,''),\n    create_text_field(6, 'Income', 'income_b', '$', '' ,''),\n  ]);\n  const [select_values_b, set_select_values_b] = React.useState([\n    create_select_field(9, 10, 11, 'Tax Filing Status', 'Tax Filing Status', ' ', tax_filing_status_arr),\n    create_select_field(12, 13, 14, 'Yearly Payments', 'Yearly Payments', ' ', yearly_payments_arr),\n    create_select_field(15, 16, 17, 'Type Of Property', 'Type Of Property', ' ', property_type_arr)\n  ]);\n  // Handle change for TextFields A and B\n  const handle_change_a = prop => event => {\n    var check_var\n    values_a[prop]['value'] = event.target.value\n    // Make sure our numerical values are not less than zero and they're not strings\n    if (prop === 0 || prop === 1 || prop === 2 || prop === 3 || prop === 6) {\n      check_var = values_a[prop]['value']\n      if ((parseFloat(check_var) < 0 || isNaN(parseFloat(check_var))) && check_var !== '') {\n        values_a[prop]['error_value'] = true\n      }\n      else {\n        values_a[prop]['error_value'] = false\n      }\n    }\n    set_values_a([...values_a])\n  };\n  // Handle change for Selection dropdown\n  const handle_select_change_a = select_prop => select_event => {\n    var key;\n    // Tax filing status\n    if (select_prop === 2) {\n      key = 0\n    }\n    // Yearly Payments\n    else if (select_prop === 5) {\n      key = 1\n    }\n    // Type of property\n    else {\n      key = 2\n    }\n    select_values_a[key]['value'] = select_event.target.value\n    set_select_values_a([...select_values_a])\n  };\n  const handle_change_b = prop => event => {\n    var check_var\n    values_b[prop]['value'] = event.target.value\n    // Make sure our numerical values are not less than zero and they're not strings\n    if (prop === 0 || prop === 1 || prop === 2 || prop === 3 || prop === 6) {\n      check_var = values_b[prop]['value']\n      if ((parseFloat(check_var) < 0 || isNaN(parseFloat(check_var))) && check_var !== '') {\n        values_b[prop]['error_value'] = true\n      }\n      else {\n        values_b[prop]['error_value'] = false\n      }\n    }\n    set_values_b([...values_b])\n  };\n  // Handle change for Selection dropdown\n  const handle_select_change_b = select_prop => select_event => {\n    var key;\n    // Tax filing status\n    if (select_prop === 2) {\n      key = 0\n    }\n    // Yearly Payments\n    else if (select_prop === 5) {\n      key = 1\n    }\n    // Type of property\n    else {\n      key = 2\n    }\n    select_values_b[key]['value'] = select_event.target.value\n    set_select_values_b([...select_values_b])\n    console.log(select_event.target.value)\n  };\n  // For vertical tabs\n  const [value, setValue] = React.useState(0);\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n  // For TableRows\n  const [data_a, set_data_a] = React.useState([\n      create_data(0, 'Principle', 0, 0, 0),\n      create_data(1, 'Interest', 0, 0, 0),\n      create_data(2, 'Private Mortgage Insurance', 0, 0, 0),\n      create_data(3, 'Property Taxes', 0, 0, 0),\n      create_data(4, 'Maintenance', 0, 0, 0),\n      create_data(5, 'Recurring Expenses Total', 0, 0, 0),\n      create_data(6, 'Closing Costs', 0, 0, 0),\n      create_data(7, 'Non-Recurring Expenses Total', 0, 0, 0),\n      create_data(8, 'Total', 0, 0, 0),\n  ]),\n    [data_b, set_data_b] = React.useState([\n    create_data(0, 'Principle', 0, 0, 0),\n    create_data(1, 'Interest', 0, 0, 0),\n    create_data(2, 'Private Mortgage Insurance', 0, 0, 0),\n    create_data(3, 'Property Taxes', 0, 0, 0),\n    create_data(4, 'Maintenance', 0, 0, 0),\n    create_data(5, 'Recurring Expenses Total', 0, 0, 0),\n    create_data(6, 'Closing Costs', 0, 0, 0),\n    create_data(7, 'Non-Recurring Expenses Total', 0, 0, 0),\n    create_data(8, 'Total', 0, 0, 0),\n  ])\n\n  // For TablePagination\n  const [page_a, set_page_a] = React.useState(0);\n  const [rows_per_page_a, set_rows_per_page_a] = React.useState(6);\n  const [page_b, set_page_b] = React.useState(0);\n  const [rows_per_page_b, set_rows_per_page_b] = React.useState(6);\n  const handle_change_page_a = (event, newPage) => {\n    set_page_a(newPage);\n};\n  const handle_change_rows_per_page_a = (event) => {\n      set_rows_per_page_a(parseInt(event.target.value, 10));\n      set_page_a(0);\n  };\n  const handle_change_page_b = (event, newPage) => {\n    set_page_b(newPage);\n};\n  const handle_change_rows_per_page_b = (event) => {\n      set_rows_per_page_b(parseInt(event.target.value, 10));\n      set_page_b(0);\n  };\n\n  // For the submit button\n  function handle_click(raw_data_arr) {\n    var response_arr = handle_mult_input(raw_data_arr)\n    if (response_arr !== null) {\n      // For the data_tables\n      set_data_a(response_arr[0])\n      set_data_b(response_arr[1])\n    }\n  }\n\n  const [order] = React.useState('asc');\n  const [orderBy] = React.useState('id');\n\n  return (\n    <div>\n        <Fade>\n          <div className={classes.root}>\n            <Fade top cascade>\n              <div style={{marginTop: '20px', marginRight: '60px', justifyContent: 'center'}}>\n                <Tabs\n                  orientation=\"vertical\"\n                  value={value}\n                  onChange={handleChange}\n                  aria-label=\"Vertical tabs example\"\n                  className={classes.tabs}\n                >\n                  <Tab label=\"Purchase A\" {...a11yProps(0)} />\n                  <Tab label=\"Purchase B\" {...a11yProps(1)} />\n                  </Tabs>\n                </div>\n              </Fade>\n              <Fade top cascade>\n                <TabPanel value={value} index={0}>\n                  <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n                    {values_a.map(value => (\n                      <TextField\n                        key={value.key}\n                        label={value.label}\n                        id={value.id}\n                        className={clsx(classes.margin, classes.textField)}\n                        InputProps={{\n                        startAdornment: <InputAdornment position=\"start\">{value.start_adornment}</InputAdornment>,\n                        endAdornment: <InputAdornment position=\"start\">{value.end_adornment}</InputAdornment>,\n                        }}\n                        variant=\"outlined\"\n                        value={value.value}\n                        onChange={handle_change_a(value.key)}\n                        error={value.error_value}\n                      />\n                    ))}\n                    {/* Creates Selections */}\n                    {select_values_a.map(select_value => (\n                      <FormControl key={select_value.fc_key} variant=\"outlined\" className={classes.root}>\n                        <InputLabel key={select_value.il_key} id=\"demo-simple-select-outlined-label\" className={clsx(classes.margin, classes.textField)}\n                        >{select_value.label_value}\n                        </InputLabel>\n                        <Select\n                          key={select_value.s_key}\n                          labelId=\"demo-simple-select-outlined-label\"\n                          id={select_value.select_id}\n                          className={clsx(classes.margin, classes.textField)}\n                          value={select_value.select_value}\n                          onChange={handle_select_change_a(select_value.s_key)}\n                          label={select_value.label_value}\n                        >\n                          {select_value.labels_arr.map((option) => (\n                            <MenuItem key={option.value} value={option.value}>\n                              {option.label}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    ))}\n                  </div>\n                </TabPanel>\n              </Fade>\n              <Fade top cascade>\n                <TabPanel value={value} index={1}>\n                <div style={{display: \"flex\", flexWrap: \"wrap\"}}>\n                  {values_b.map(value => (\n                    <TextField\n                      key={value.key}\n                      label={value.label}\n                      id={value.id}\n                      className={clsx(classes.margin, classes.textField)}\n                      InputProps={{\n                      startAdornment: <InputAdornment position=\"start\">{value.start_adornment}</InputAdornment>,\n                      endAdornment: <InputAdornment position=\"start\">{value.end_adornment}</InputAdornment>,\n                      }}\n                      variant=\"outlined\"\n                      value={value.value}\n                      onChange={handle_change_b(value.key)}\n                      error={value.error_value}\n                    />\n                  ))}\n                    {select_values_b.map(select_value => (\n                      <FormControl key={select_value.fc_key} variant=\"outlined\" className={classes.root}>\n                        <InputLabel key={select_value.il_key} id=\"demo-simple-select-outlined-label\" className={clsx(classes.margin, classes.textField)}\n                        >{select_value.label_value}\n                        </InputLabel>\n                        <Select\n                          key={select_value.s_key}\n                          labelId=\"demo-simple-select-outlined-label\"\n                          id={select_value.select_id}\n                          className={clsx(classes.margin, classes.textField)}\n                          value={select_value.select_value}\n                          onChange={handle_select_change_b(select_value.s_key)}\n                          label={select_value.label_value}\n                        >\n                          {select_value.labels_arr.map((option) => (\n                            <MenuItem key={option.value} value={option.value}>\n                              {option.label}\n                            </MenuItem>\n                          ))}\n                        </Select>\n                      </FormControl>\n                    ))}\n                </div>\n                </TabPanel>\n              </Fade>\n            </div>\n          <Fade bottom cascade>\n            <div style={{textAlign: 'center'}}>\n              <Button \n                      size=\"large\" variant=\"contained\" color=\"primary\" \n                      style={{marginBottom: '5.2vmin', marginTop: '1.5vmin'}}\n                      onClick={() => handle_click([values_a, values_b])}\n              >\n                Submit All\n              </Button>\n            </div>\n          </Fade>\n          <Grid container spacing={3}>\n            <Grid item xs={6}>\n                <TableContainer component={Paper} className={classes.container}>\n                  <Table stickyHeader className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Purchase 'A' Expenses</TableCell>\n                        <TableCell align=\"right\">Monthly&nbsp;($)</TableCell>\n                        <TableCell align=\"right\">Yearly&nbsp;($)</TableCell>\n                        <TableCell align=\"right\">Total&nbsp;($)</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {stable_sort(data_a, get_comparator(order, orderBy))\n                        .slice(page_a * rows_per_page_a, page_a * rows_per_page_a + rows_per_page_a)\n                        .map((row) => {\n                          return (\n                            <TableRow key={row.name} hover>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.monthly}</TableCell>\n                            <TableCell align=\"right\">{row.yearly}</TableCell>\n                            <TableCell align=\"right\">{row.total}</TableCell>\n                          </TableRow>\n                          );\n                        })}\n                    </TableBody>\n                  </Table>\n                  <TablePagination\n                  rowsPerPageOptions={[6, 9]}\n                  component=\"div\"\n                  count={data_a.length}\n                  rowsPerPage={rows_per_page_a}\n                  page={page_a}\n                  onChangePage={handle_change_page_a}\n                  onChangeRowsPerPage={handle_change_rows_per_page_a}\n                />\n                </TableContainer>\n            </Grid>\n            <Grid item xs={6}>\n                <TableContainer component={Paper} className={classes.container}>\n                  <Table stickyHeader className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell>Purchase 'B' Expenses</TableCell>\n                        <TableCell align=\"right\">Monthly&nbsp;($)</TableCell>\n                        <TableCell align=\"right\">Yearly&nbsp;($)</TableCell>\n                        <TableCell align=\"right\">Total&nbsp;($)</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {stable_sort(data_b, get_comparator(order, orderBy))\n                        .slice(page_b * rows_per_page_b, page_b * rows_per_page_b + rows_per_page_b)\n                        .map((row) => {\n                          return (\n                            <TableRow key={row.name} hover>\n                            <TableCell component=\"th\" scope=\"row\">\n                              {row.name}\n                            </TableCell>\n                            <TableCell align=\"right\">{row.monthly}</TableCell>\n                            <TableCell align=\"right\">{row.yearly}</TableCell>\n                            <TableCell align=\"right\">{row.total}</TableCell>\n                          </TableRow>\n                          );\n                        })}\n                    </TableBody>\n                  </Table>\n                  <TablePagination\n                  rowsPerPageOptions={[6, 9]}\n                  component=\"div\"\n                  count={data_b.length}\n                  rowsPerPage={rows_per_page_b}\n                  page={page_b}\n                  onChangePage={handle_change_page_b}\n                  onChangeRowsPerPage={handle_change_rows_per_page_b}\n                />\n                </TableContainer>\n            </Grid>\n          </Grid>\n        </Fade>\n    </div>\n  );\n}",["45","46"],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/handle_input.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/handle_mult_input.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/morty_js/useful_functions.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/calc_finances.js",[],"/Users/ryanmccann/Desktop/misc/programming/morty_app/vsc_scripts/morty_app_ui/src/components/calc_mult_finances.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":6,"column":17,"nodeType":"53","messageId":"54","endLine":6,"endColumn":23},{"ruleId":"51","severity":1,"message":"55","line":11,"column":10,"nodeType":"53","messageId":"54","endLine":11,"endColumn":23},{"ruleId":"47","replacedBy":"56"},{"ruleId":"49","replacedBy":"57"},"no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'Hidden' is defined but never used.","Identifier","unusedVar","'ResponsivePie' is defined but never used.",["58"],["59"],"no-global-assign","no-unsafe-negation"]